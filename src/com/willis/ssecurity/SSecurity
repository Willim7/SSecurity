package com.willis.ssecurity;

import com.warrenstrange.googleauth.GoogleAuthenticator;
import com.willis.ssecurity.normal.command.Command;
import com.willis.ssecurity.normal.listeners.*;
import com.willis.ssecurity.normal.util.Util;
import com.willis.ssecurity.quickresponse.command.QRCommand;
import com.willis.ssecurity.quickresponse.listeners.QRPlayerChat;
import com.willis.ssecurity.quickresponse.listeners.QRPlayerCommand;
import com.willis.ssecurity.quickresponse.listeners.QRPlayerJoin;
import com.willis.ssecurity.quickresponse.listeners.QRPlayerQuit;
import com.willis.ssecurity.quickresponse.util.QRUtil;
import com.willis.ssecurity.utilities.Config;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.*;

public class SSecurity extends JavaPlugin implements Listener {

    private Config users;

    @Override
    public void onEnable() {

        //Configuration
        saveDefaultConfig();
        users = new Config(this, "Players");

        //Google Authenticator
        GoogleAuthenticator googleAuthenticator = new GoogleAuthenticator();
        googleAuthenticatorList.add(googleAuthenticator);

        PluginManager pluginManager = getServer().getPluginManager();

        if (pluginManager.getPlugin("SuperMaps") == null) {
            if (getConfig().getBoolean("QRCode")) {

                //Disable Plugin
                pluginManager.disablePlugin(this);
                System.out.println("[SSecurity] You cannot enable the QR Code without having SuperMaps!");

            } else {

                //Listeners
                pluginManager.registerEvents(new PlayerChat(this), this);
                pluginManager.registerEvents(new PlayerCommand(this), this);
                pluginManager.registerEvents(new PlayerJoin(this), this);
                pluginManager.registerEvents(new PlayerMove(this), this);
                pluginManager.registerEvents(new PlayerQuit(this), this);

                //Command
                getCommand("SSecurity").setExecutor(new Command(this));

            }
        } else {

            if (getConfig().getBoolean("QRCode")) {

                //Listeners
                pluginManager.registerEvents(new QRPlayerChat(this), this);
                pluginManager.registerEvents(new QRPlayerCommand(this), this);
                pluginManager.registerEvents(new QRPlayerJoin(this), this);
                pluginManager.registerEvents(new QRPlayerQuit(this), this);

                //Command
                getCommand("SSecurity").setExecutor(new QRCommand(this));

            } else {

                //Listeners
                pluginManager.registerEvents(new PlayerChat(this), this);
                pluginManager.registerEvents(new PlayerCommand(this), this);
                pluginManager.registerEvents(new PlayerJoin(this), this);
                pluginManager.registerEvents(new PlayerMove(this), this);
                pluginManager.registerEvents(new PlayerQuit(this), this);

                //Command
                getCommand("SSecurity").setExecutor(new Command(this));
            }
        }
    }

    @Override
    public void onDisable() {
        for (Player player : getServer().getOnlinePlayers()) {
            if (eInput.contains(player.getUniqueId()) || (gLogin.contains(player.getUniqueId()) || (eLogin.containsKey(player.getUniqueId())))) {
                player.kickPlayer(ChatColor.translateAlternateColorCodes('&', getConfig().getString("KickMessage")));
            }
        }
    }

    //Lists + Maps
    private List<GoogleAuthenticator> googleAuthenticatorList = new ArrayList<GoogleAuthenticator>();
    private List<UUID> eInput = new ArrayList<UUID>();
    private List<UUID> gLogin = new ArrayList<UUID>();
    private Map<UUID, String> eLogin = new HashMap<UUID, String>();

    //Getters
    public Config getUsers() { return users; }
    public List<GoogleAuthenticator> getGoogleAuthenticator() { return googleAuthenticatorList; }
    public List<UUID> geteInput() { return eInput; }
    public List<UUID> getgLogin() { return gLogin; }
    public Map<UUID, String> geteLogin() { return eLogin; }
}
